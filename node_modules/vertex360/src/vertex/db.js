const path = require('path')
const mongoose = require('mongoose')
mongoose.Promise = require('bluebird')

const mongoConnect = (dbUri, onError, onSuccess) => {
	// mpromise (mongoose's default promise library) is deprecated, plug in
	// your own promise library instead: http://mongoosejs.com/docs/promises.html
	mongoose.connect(dbUri, {useNewUrlParser:true})
	.then(data => {
		if (onSuccess != null){
			onSuccess()
			return
		}

		console.log ('DB Connection success.')
	})
	.catch(err => {
		if (onError != null){
			onError(err)
			return
		}

		console.log('Database Connection Failed. Please check the url and make sure the database server is running.')
	})
}

const nedbConnect = (dbUri, onError, onSuccess) => {
	// const connect = require('camo').connect
	const connect = require('vertex-camo').connect
	let database;

	connect(dbUri).then(db => {
	  // console.log('DB initialized: ' + JSON.stringify(db))
	  database = db
		onSuccess()
		return
	})
	.catch(err => {
		console.log('DB ERROR: ' + err.message)
		onError(err)
		return
	})
}

module.exports = {

	connect: (dbUri, onError, onSuccess) => {
		mongoConnect(dbUri, onError, onSuccess)
	},

	connectMongo: (dbUri, onError, onSuccess) => {
		mongoConnect(dbUri, onError, onSuccess)
	},

	connectNedb: (dbUri, onError, onSuccess) => {
		nedbConnect(dbUri, onError, onSuccess)
	},

	connectPostgres: (dbUri, onError) => {

	},

	nedbConfig: (url, successCallback, errCallback) => {
		return {
			url: url,
	    type: 'nedb',
			onError: (err) => {
				if (errCallback == null)
					console.log('DB Connection Failed!')
				else
					errCallback(err)
			},
			onSuccess: () => {
				if (successCallback == null)
					console.log('DB Successfully Connected!')
				else
					successCallback()
			}
		}
	}
}

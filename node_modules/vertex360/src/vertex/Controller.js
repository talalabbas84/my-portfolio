const path = require('path')
const BASE_DIR = __dirname + '/../../../../'
const TMP_DIR = process.env.TMP_DIR || '/tmp'

const LOCAL_DIR = path.join(BASE_DIR, TMP_DIR)
let _TURBO_ENV, _TURBO_API_KEY, _turbo = null

class Controller {
  constructor(schema, env){
    this._schema = schema // Job, Post, Profile, etc
    _turbo = require('turbo360')({site_id: env.TURBO_APP_ID})
    _TURBO_API_KEY = env.TURBO_API_KEY
    _TURBO_ENV = env.TURBO_ENV
  }

  static checkCollectionDB(collectionName) {
  	const collectionFilePath = (_TURBO_ENV=='dev') ? LOCAL_DIR+'/'+collectionName+'.db' : TMP_DIR+'/'+collectionName+'.db'

  	return new Promise((resolve, reject) => {
  		_turbo.checkCollectionFile(collectionName, collectionFilePath)
  		.then(data => { // load collection file from backing store if necessary
  			return (data.found) ? null : _turbo.loadCollection(collectionName, collectionFilePath, _TURBO_API_KEY)
  		})
  		.then(data => {
  			resolve(data)
  		})
  		.catch(err => {
  			reject(err)
  		})
  	})
  }

  static syncCollection(collectionName) {
    const filePath = (_TURBO_ENV=='dev') ? LOCAL_DIR + '/'+collectionName+'.db' : TMP_DIR+'/'+collectionName+'.db'
  	return _turbo.syncCollection(collectionName, filePath, _TURBO_API_KEY)
  }

  static parseFilters(params) {
    if (params == null)
      return null

    const filters = {}
    filters['sort'] = (params.sort == 'asc') ? 'timestamp' : '-timestamp'
    delete params['sort']

    filters['limit'] = (params.limit) ? parseInt(params.limit) : 0
    delete params['limit']
    return filters
  }

  collectionName() {
		return this._schema.collectionName()
	}

	schema() {
		return this._schema.schema()
	}

  get(params) {
		// return new Promise((resolve, reject) => {
		// 	utils.checkCollectionDB(Job.collectionName(), turbo)
		// 	.then(data => {
		// 		return Job.find(params, utils.parseFilters(params))
		// 	})
		// 	.then(jobs => {
		// 		resolve(Job.convertToJson(jobs))
		// 	})
		// 	.catch(err => {
		// 		reject(err)
		// 	})
		// })
	}

	getById(id) {
		// return new Promise((resolve, reject) => {
		// 	utils.checkCollectionDB(Job.collectionName(), turbo)
		// 	.then(data => {
		// 		return Job.findById(id)
		// 	})
		// 	.then(job => {
		// 		if (job == null){
		// 			throw new Error(Job.resourceName + ' ' + id + ' not found.')
		// 			return
		// 		}
    //
		// 		resolve(job.summary())
		// 	})
		// 	.catch(err => {
		// 		reject(new Error(Job.resourceName + ' ' + id + ' not found.'))
		// 	})
		// })
	}

	post(body) {
		// return new Promise((resolve, reject) => {
		// 	let payload = null
		// 	body['dateString'] = utils.formattedDate('MMMM Do, YYYY')
    //
		// 	Job.create(body)
		// 	.then(job => {
		// 		payload = job.summary()
		// 		return utils.syncCollection(Job.collectionName(), turbo)
		// 	})
		// 	.then(data => {
		// 		resolve(payload)
		// 	})
		// 	.catch(err => {
		// 		reject(err)
		// 	})
		// })
	}

	put(id, params) {
		// return new Promise((resolve, reject) => {
		// 	let payload = null
		// 	Job.findByIdAndUpdate(id, params, {new:true})
		// 	.then(job => {
		// 		payload = job.summary()
		// 		return utils.syncCollection(Job.collectionName(), turbo)
		// 	})
		// 	.then(data => {
		// 		resolve(payload)
		// 	})
		// 	.catch(err => {
		// 		reject(err)
		// 	})
		// })
	}

	delete(id) {
		// return new Promise((resolve, reject) => {
		// 	Job.findByIdAndRemove(id)
		// 	.then(() => {
		// 		return utils.syncCollection(Job.collectionName(), turbo)
		// 	})
		// 	.then(data => {
		// 		resolve()
		// 	})
		// 	.catch(err => {
		// 		reject(err)
		// 	})
		// })
	}

}

module.exports = Controller
